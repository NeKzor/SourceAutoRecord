/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2019 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef TGUI_FLOAT_RECT_HPP
#define TGUI_FLOAT_RECT_HPP

#include <TGUI/Config.hpp>
#include <SFML/Graphics/Rect.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    class FloatRect : public sf::FloatRect
    {
    public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Default constructor
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FloatRect() = default;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Constructs the rectangle from an sf::FloatRect
        ///
        /// @param rect  Rectangle to initialize
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FloatRect(sf::FloatRect rect) :
            sf::FloatRect{rect}
        {
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Constructs the rectangle from its position and size
        ///
        /// @param rectLeft   Left coordinate of the rectangle
        /// @param rectTop    Top coordinate of the rectangle
        /// @param rectWidth  Width of the rectangle
        /// @param rectHeight Height of the rectangle
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FloatRect(float rectLeft, float rectTop, float rectWidth, float rectHeight) :
            sf::FloatRect{rectLeft, rectTop, rectWidth, rectHeight}
        {
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Constructs the rectangle from its position and size
        ///
        /// @param position Position of the top-left corner of the rectangle
        /// @param size     Size of the rectangle
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FloatRect(Vector2f position, Vector2f size) :
            sf::FloatRect{position, size}
        {
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Sets the position of the rectangle
        ///
        /// @param position  New position for the rectangle
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setPosition(Vector2f position)
        {
            left = position.x;
            top = position.y;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the position of the rectangle
        ///
        /// @return Rectangle position
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Vector2f getPosition() const
        {
            return {left, top};
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Sets the size of the rectangle
        ///
        /// @param size  New size for the rectangle
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setSize(Vector2f size)
        {
            width = size.x;
            height = size.y;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the size of the rectangle
        ///
        /// @return Rectangle size
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Vector2f getSize() const
        {
            return {width, height};
        }
    };
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_FLOAT_RECT_HPP
